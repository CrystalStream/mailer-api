stages:
  - deploy

image: node:latest

variables:
  NODE_ENV: test
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ""
  DATABASE_TEST_URL: postgres://postgres@postgres:5432/postgres

test:
  stage: test
  before_script:
    - echo "Environment is set to $NODE_ENV"
    - echo "Database url is set to $DATABASE_TEST_URL"
    - yarn install
  services:
    - postgres:latest
  script:
    - yarn test:full
    - mv coverage/ public/
  coverage: '/(?:All files\s+\|\s+)(\d+\.?\d*)/'
  artifacts:
    paths:
      - public/
    expire_in: 30 days
    reports:
      junit: junit.xml

lint:
  stage: test
  before_script:
    - yarn global add typescript tslint @altamir/standards-tslint
  script:
    - yarn test:lint

audit:
  stage: test
  script:
    - yarn test:audit

code_quality:
  stage: test
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json

staging:
  stage: deploy
  script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
    - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_API_KEY
  only:
    - develop
    - master
