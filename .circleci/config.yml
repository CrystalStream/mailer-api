version: 2

jobs:
  build:
    working_directory: ~/app

    docker:
      - image: ubuntu:bionic
        # environment:
        #   POSTGRES_TEST_URL: postgres://postgres@localhost:5432/postgres

      # - image: postgres:latest

    steps:
      - checkout

      # - run:
      #     name: install-global-deps
      #     command: npm i -g npm@latest yarn typescript

      # - run: node -v

      # - restore_cache: # special step to restore the dependency cache
      #     # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      #     key: dependency-cache-{{ checksum "package.json" }}

      # - run:
      #     name: yarn-install
      #     command: yarn install

      # - save_cache: # special step to save the dependency cache
      #     key: dependency-cache-{{ checksum "package.json" }}
      #     paths:
      #       - ./node_modules

      - run:
          name: Install dependencies
          command: |
            apt update -y && apt upgrade -y
            apt install curl -y # install curl
            # install docker
            apt install docker.io
            # curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - -y
            # add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable" -y
            # apt update -y
            # apt install docker-ce gnupg -y
            apt install systemd -y # install systemd (for systemctl command)
            systemctl start docker # start docker
            # install docker compose
            curl -L https://github.com/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            mv ~/docker-compose /usr/local/bin/docker-compose

      - run:
          name: test
          command: docker-compose -f docker-compose.test.yml up # Should always be same as yarn docker:test

      # - run:
      #     name: code-coverage
      #     command: './node_modules/.bin/nyc report --reporter=text-lcov'

      # - store_artifacts: # special step to save test results as as artifact
      #     # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
      #     path: test-results.xml
      #     # prefix: tests

      # - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
      #     path: coverage
      #     # prefix: coverage

      # - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
      #     path: test-results.xml
      # # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
